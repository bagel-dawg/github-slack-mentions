service: github-slack-mentions

plugins:
  - serverless-python-requirements

custom:
  default_stage: test
  pythonRequirements:
    dockerizePip: non-linux  

provider:
  name: aws
  profile: bageltechnologies
  runtime: python3.7
  stage: dev
  region: us-east-1
  environment:
    SLACK_BOT_TOKEN: xoxb-secret-key
    GITHUB_SECRET: secret-github-key


# you can add statements to the Lambda function's IAM Role here
# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - "s3:ListBucket"
#     Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#   - Effect: "Allow"
#     Action:
#       - "s3:PutObject"
#     Resource:
#       Fn::Join:
#         - ""
#         - - "arn:aws:s3:::"
#           - "Ref" : "ServerlessDeploymentBucket"
#           - "/*"

# you can add packaging information here
package:
  include:
    - "*.py"
    - "helpers/*.py"

functions:
  mentions:
    handler: route_requests.lambda_handler
    events:
      - http:
          path: github-webhook/mentions
          method: post
          integration: lambda
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
